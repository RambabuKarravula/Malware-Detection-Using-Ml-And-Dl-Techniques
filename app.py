import streamlit as st
from tensorflow import keras
from urllib.parse import urlparse
import numpy as np
import re

def load_model():
    model=keras.models.load_model('Malicious_URL_Prediction.h5')
    return model
with st.sidebar:
    st.subheader("About Malware Detection")
    st.write(
        "Malware, short for malicious software, refers to any software program designed to cause damage or gain unauthorized access to computer systems, networks, or devices. Malware is a broad term that encompasses various types of malicious code, including viruses, worms, Trojans, ransomware, spyware, adware, and more. The primary objective of malware is to disrupt normal operations, steal sensitive data, or gain control over the infected system or network. Malware can be distributed through various means, such as email attachments, malicious websites, infected removable media, or exploiting software vulnerabilities."
    )

with st.spinner("Loading Model...."):
    model=load_model()

col1, col2, col3 = st.columns(3)

with col1:
    st.write(' ')

with col2:
    import streamlit as st

st.markdown("""
<style>
body {
background-image: url("https://blog.barracuda.com/content/dam/barracuda-blog/images/2023/12/malware-detection-remediation.jpg");
background-size: cover;
}
</style>
""", unsafe_allow_html=True)
st.image("https://imageio.forbes.com/specials-images/imageserve/645509a8754550169e6396dd//0x0.jpg?crop=3039,1709,x0,y0,safe&height=399&width=711&fit=bounds")

with col3:
    st.write(' ')


import os
import streamlit as st

def checkFile(file_path):
    # Implement your malware detection logic here
    # Return True if the file is legitimate, False otherwise
    pass

st.title("Advanced Malware Detection using Machine Learning And Deep Learning Techniques")
st.markdown("""
Welcome to the vanguard of cyber defense, where cutting-edge innovation meets unwavering vigilance! Our project, "Advanced Malware Detection using Machine Learning and Deep Learning Techniques," stands as a formidable bulwark against the ever-evolving threat of malicious software and malicious URLs. Harnessing the formidable power of machine learning and deep learning algorithms, we embark on a mission to revolutionize the realm of malware detection and URL risk assessment.""")
st.markdown("##### Dataset used: [Kaggle](https://www.kaggle.com/competitions/malware-detection/data)")
st.subheader("Try yourself:-")

file = st.file_uploader("Upload a file to check for malwares:", accept_multiple_files=True)
if len(file):
    with st.spinner("Checking..."):
        for i in file:
            open('malwares/tempFile', 'wb').write(i.getvalue())
            legitimate = checkFile("malwares/tempFile")
            if legitimate:
                st.write(f'<span style="color:red;"> file seems ⛔️ **MALICOUS**</span>',unsafe_allow_html=True)
                st.markdown(f"File {i.name} is probably a **Malware**!!!")
            else:
                st.write(f'<span style="color:green;">file seems ✅ **legitimate**</span>',unsafe_allow_html=True)
                st.markdown(f"File {i.name} is probably a **Safe**!!!")
                os.remove("malwares/tempFile")
def fd_length(url):
    urlpath= urlparse(url).path
    try:
        return len(urlpath.split('/')[1])
    except:
        return 0
    
def digit_count(url):
    digits = 0
    for i in url:
        if i.isnumeric():
            digits = digits + 1
    return digits

def letter_count(url):
    letters = 0
    for i in url:
        if i.isalpha():
            letters = letters + 1
    return letters

def no_of_dir(url):
    urldir = urlparse(url).path
    return urldir.count('/')

def having_ip_address(url):
    match = re.search(
        '(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.'
        '([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|'  # IPv4
        '((0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\/)' # IPv4 in hexadecimal
        '(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}', url)  # Ipv6
    if match:
        # print match.group()
        return -1
    else:
        # print 'No matching pattern found'
        return 1

def extract_features(url):
    # 'hostname_length', 'path_length', 'fd_length', 'count-', 'count@', 'count?', 'count%', 'count.', 'count=', 'count-http','count-https', 'count-www', 'count-digits','count-letters', 'count_dir', 'use_of_ip'
    hostname_length = len(urlparse(url).netloc)
    path_length = len(urlparse(url).path)
    f_length = fd_length(url)
    count_1 = url.count('-')
    count_2 = url.count('@')
    count_3 = url.count('?')
    count_4 = url.count('%')
    count_5 = url.count('.')
    count_6 = url.count('=')
    count_7 = url.count('http')
    count_8 = url.count('https')
    count_9 = url.count('www')
    count_10 = digit_count(url)
    count_11 = letter_count(url)
    count_12 = no_of_dir(url)
    count_13 = having_ip_address(url)
    output = [hostname_length, path_length, f_length, count_1, count_2, count_3, count_4, count_5, count_6, count_7, count_8, count_9, count_10, count_11, count_12, count_13]
    print(output)
    features = np.array([output]) 
    return features

def predict(val):
    st.write(f'Classifying URL: {val}')
    with st.spinner("Classifying..."):
        input = extract_features(val)
        print(input.shape)
        for item in input:
            print(type(item))
        pred_test = model.predict(input)
        percentage_value = pred_test[0][0] * 100
        if (pred_test[0] < 0.5):
            st.write(f'<span style="color:green;">✅ **SAFE with {percentage_value:.2f}% malicious confidence**</span>', unsafe_allow_html=True)
        else: 
            st.write(f'<span style="color:red;">⛔️ **MALICOUS with {percentage_value:.2f}% malicious confidence**</span>', unsafe_allow_html=True)
        print(input, pred_test)


value = st.text_input("Enter URL to scan", "https://www.google.com")
submit = st.button("Classify URL")

if submit:
    predict(value)
import streamlit as st
from url import apicheck, pickurlandchecking, scanning, report, makeitlooknicer

def main():
    st.subheader("URL Analyzer using VirusTotal API")
    url = st.text_input("Enter a URL to scan: ")

    if st.button("Scan"):
        if url:
            try:
                api = apicheck()
                inputforurl = url
                ID = scanning(api, inputforurl)    
                res = report(api, ID)
                repleaced = makeitlooknicer(res)
                st.write(repleaced)
            except Exception as e:
                st.write("An unknown error has occurred. Please try again later...")
                st.write(e)
        else:
            st.write("Please enter a URL.")

if __name__ == "__main__":
    main()